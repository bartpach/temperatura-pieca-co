
RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000141c  000014b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800118  00800118  000014c8  2**0
                  ALLOC
  3 .stab         00001284  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eac  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e1       	ldi	r30, 0x1C	; 28
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e1       	ldi	r26, 0x18	; 24
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 31       	cpi	r26, 0x19	; 25
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 74 06 	call	0xce8	; 0xce8 <main>
      9e:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_LCD_OutNibble>:
//
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
if(nibbleToWrite & 0x01)
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	88 2f       	mov	r24, r24
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	81 70       	andi	r24, 0x01	; 1
      ba:	99 27       	eor	r25, r25
      bc:	00 97       	sbiw	r24, 0x00	; 0
      be:	51 f0       	breq	.+20     	; 0xd4 <_LCD_OutNibble+0x2e>
	LCD_DB4_PORT |= LCD_DB4;
      c0:	85 e2       	ldi	r24, 0x25	; 37
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	25 e2       	ldi	r18, 0x25	; 37
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	21 60       	ori	r18, 0x01	; 1
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
      d2:	09 c0       	rjmp	.+18     	; 0xe6 <_LCD_OutNibble+0x40>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
      d4:	85 e2       	ldi	r24, 0x25	; 37
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	25 e2       	ldi	r18, 0x25	; 37
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	f9 01       	movw	r30, r18
      de:	20 81       	ld	r18, Z
      e0:	2e 7f       	andi	r18, 0xFE	; 254
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18

if(nibbleToWrite & 0x02)
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	88 2f       	mov	r24, r24
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	82 70       	andi	r24, 0x02	; 2
      ee:	99 27       	eor	r25, r25
      f0:	00 97       	sbiw	r24, 0x00	; 0
      f2:	51 f0       	breq	.+20     	; 0x108 <_LCD_OutNibble+0x62>
	LCD_DB5_PORT |= LCD_DB5;
      f4:	85 e2       	ldi	r24, 0x25	; 37
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	25 e2       	ldi	r18, 0x25	; 37
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	20 81       	ld	r18, Z
     100:	22 60       	ori	r18, 0x02	; 2
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18
     106:	09 c0       	rjmp	.+18     	; 0x11a <_LCD_OutNibble+0x74>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     108:	85 e2       	ldi	r24, 0x25	; 37
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	25 e2       	ldi	r18, 0x25	; 37
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	2d 7f       	andi	r18, 0xFD	; 253
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18

if(nibbleToWrite & 0x04)
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	88 2f       	mov	r24, r24
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	84 70       	andi	r24, 0x04	; 4
     122:	99 27       	eor	r25, r25
     124:	00 97       	sbiw	r24, 0x00	; 0
     126:	51 f0       	breq	.+20     	; 0x13c <_LCD_OutNibble+0x96>
	LCD_DB6_PORT |= LCD_DB6;
     128:	85 e2       	ldi	r24, 0x25	; 37
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	25 e2       	ldi	r18, 0x25	; 37
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	24 60       	ori	r18, 0x04	; 4
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	09 c0       	rjmp	.+18     	; 0x14e <_LCD_OutNibble+0xa8>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     13c:	85 e2       	ldi	r24, 0x25	; 37
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	25 e2       	ldi	r18, 0x25	; 37
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f9 01       	movw	r30, r18
     146:	20 81       	ld	r18, Z
     148:	2b 7f       	andi	r18, 0xFB	; 251
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18

if(nibbleToWrite & 0x08)
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	88 2f       	mov	r24, r24
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	88 70       	andi	r24, 0x08	; 8
     156:	99 27       	eor	r25, r25
     158:	00 97       	sbiw	r24, 0x00	; 0
     15a:	51 f0       	breq	.+20     	; 0x170 <_LCD_OutNibble+0xca>
	LCD_DB7_PORT |= LCD_DB7;
     15c:	85 e2       	ldi	r24, 0x25	; 37
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	25 e2       	ldi	r18, 0x25	; 37
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	f9 01       	movw	r30, r18
     166:	20 81       	ld	r18, Z
     168:	28 60       	ori	r18, 0x08	; 8
     16a:	fc 01       	movw	r30, r24
     16c:	20 83       	st	Z, r18
     16e:	09 c0       	rjmp	.+18     	; 0x182 <_LCD_OutNibble+0xdc>
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     170:	85 e2       	ldi	r24, 0x25	; 37
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	25 e2       	ldi	r18, 0x25	; 37
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	27 7f       	andi	r18, 0xF7	; 247
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
}
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	a1 97       	sbiw	r28, 0x21	; 33
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	89 a3       	std	Y+33, r24	; 0x21
LCD_E_PORT |= LCD_E;
     1a0:	8b e2       	ldi	r24, 0x2B	; 43
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	2b e2       	ldi	r18, 0x2B	; 43
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	f9 01       	movw	r30, r18
     1aa:	20 81       	ld	r18, Z
     1ac:	20 64       	ori	r18, 0x40	; 64
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
_LCD_OutNibble(dataToWrite >> 4);
     1b2:	89 a1       	ldd	r24, Y+33	; 0x21
     1b4:	82 95       	swap	r24
     1b6:	8f 70       	andi	r24, 0x0F	; 15
     1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     1bc:	8b e2       	ldi	r24, 0x2B	; 43
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	2b e2       	ldi	r18, 0x2B	; 43
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	f9 01       	movw	r30, r18
     1c6:	20 81       	ld	r18, Z
     1c8:	2f 7b       	andi	r18, 0xBF	; 191
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
LCD_E_PORT |= LCD_E;
     1ce:	8b e2       	ldi	r24, 0x2B	; 43
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	2b e2       	ldi	r18, 0x2B	; 43
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	20 64       	ori	r18, 0x40	; 64
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
_LCD_OutNibble(dataToWrite);
     1e0:	89 a1       	ldd	r24, Y+33	; 0x21
     1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     1e6:	8b e2       	ldi	r24, 0x2B	; 43
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	2b e2       	ldi	r18, 0x2B	; 43
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	f9 01       	movw	r30, r18
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 7b       	andi	r18, 0xBF	; 191
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	a8 e4       	ldi	r26, 0x48	; 72
     1fe:	b2 e4       	ldi	r27, 0x42	; 66
     200:	89 83       	std	Y+1, r24	; 0x01
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	ab 83       	std	Y+3, r26	; 0x03
     206:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     208:	2b ea       	ldi	r18, 0xAB	; 171
     20a:	3a ea       	ldi	r19, 0xAA	; 170
     20c:	4a e2       	ldi	r20, 0x2A	; 42
     20e:	50 e4       	ldi	r21, 0x40	; 64
     210:	69 81       	ldd	r22, Y+1	; 0x01
     212:	7a 81       	ldd	r23, Y+2	; 0x02
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	8d 83       	std	Y+5, r24	; 0x05
     222:	9e 83       	std	Y+6, r25	; 0x06
     224:	af 83       	std	Y+7, r26	; 0x07
     226:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	ab 81       	ldd	r26, Y+3	; 0x03
     22e:	bc 81       	ldd	r27, Y+4	; 0x04
     230:	9c 01       	movw	r18, r24
     232:	ad 01       	movw	r20, r26
     234:	bc 01       	movw	r22, r24
     236:	cd 01       	movw	r24, r26
     238:	0e 94 34 08 	call	0x1068	; 0x1068 <__addsf3>
     23c:	dc 01       	movw	r26, r24
     23e:	cb 01       	movw	r24, r22
     240:	89 87       	std	Y+9, r24	; 0x09
     242:	9a 87       	std	Y+10, r25	; 0x0a
     244:	ab 87       	std	Y+11, r26	; 0x0b
     246:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e8       	ldi	r20, 0x80	; 128
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	6d 81       	ldd	r22, Y+5	; 0x05
     252:	7e 81       	ldd	r23, Y+6	; 0x06
     254:	8f 81       	ldd	r24, Y+7	; 0x07
     256:	98 85       	ldd	r25, Y+8	; 0x08
     258:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     25c:	88 23       	and	r24, r24
     25e:	1c f4       	brge	.+6      	; 0x266 <_LCD_Write+0xdc>
		__ticks = 1;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	8d 87       	std	Y+13, r24	; 0x0d
     264:	b2 c0       	rjmp	.+356    	; 0x3ca <_LCD_Write+0x240>
	else if (__tmp2 > 65535)
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	69 85       	ldd	r22, Y+9	; 0x09
     270:	7a 85       	ldd	r23, Y+10	; 0x0a
     272:	8b 85       	ldd	r24, Y+11	; 0x0b
     274:	9c 85       	ldd	r25, Y+12	; 0x0c
     276:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     27a:	18 16       	cp	r1, r24
     27c:	0c f0       	brlt	.+2      	; 0x280 <_LCD_Write+0xf6>
     27e:	7b c0       	rjmp	.+246    	; 0x376 <_LCD_Write+0x1ec>
	{
		_delay_ms(__us / 1000.0);
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	4a e7       	ldi	r20, 0x7A	; 122
     286:	54 e4       	ldi	r21, 0x44	; 68
     288:	69 81       	ldd	r22, Y+1	; 0x01
     28a:	7a 81       	ldd	r23, Y+2	; 0x02
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	9c 81       	ldd	r25, Y+4	; 0x04
     290:	0e 94 9c 08 	call	0x1138	; 0x1138 <__divsf3>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	8e 87       	std	Y+14, r24	; 0x0e
     29a:	9f 87       	std	Y+15, r25	; 0x0f
     29c:	a8 8b       	std	Y+16, r26	; 0x10
     29e:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	4a ef       	ldi	r20, 0xFA	; 250
     2a6:	54 e4       	ldi	r21, 0x44	; 68
     2a8:	6e 85       	ldd	r22, Y+14	; 0x0e
     2aa:	7f 85       	ldd	r23, Y+15	; 0x0f
     2ac:	88 89       	ldd	r24, Y+16	; 0x10
     2ae:	99 89       	ldd	r25, Y+17	; 0x11
     2b0:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	8a 8b       	std	Y+18, r24	; 0x12
     2ba:	9b 8b       	std	Y+19, r25	; 0x13
     2bc:	ac 8b       	std	Y+20, r26	; 0x14
     2be:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e8       	ldi	r20, 0x80	; 128
     2c6:	5f e3       	ldi	r21, 0x3F	; 63
     2c8:	6a 89       	ldd	r22, Y+18	; 0x12
     2ca:	7b 89       	ldd	r23, Y+19	; 0x13
     2cc:	8c 89       	ldd	r24, Y+20	; 0x14
     2ce:	9d 89       	ldd	r25, Y+21	; 0x15
     2d0:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     2d4:	88 23       	and	r24, r24
     2d6:	2c f4       	brge	.+10     	; 0x2e2 <_LCD_Write+0x158>
		__ticks = 1;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	9f 8b       	std	Y+23, r25	; 0x17
     2de:	8e 8b       	std	Y+22, r24	; 0x16
     2e0:	3f c0       	rjmp	.+126    	; 0x360 <_LCD_Write+0x1d6>
	else if (__tmp > 65535)
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	3f ef       	ldi	r19, 0xFF	; 255
     2e6:	4f e7       	ldi	r20, 0x7F	; 127
     2e8:	57 e4       	ldi	r21, 0x47	; 71
     2ea:	6a 89       	ldd	r22, Y+18	; 0x12
     2ec:	7b 89       	ldd	r23, Y+19	; 0x13
     2ee:	8c 89       	ldd	r24, Y+20	; 0x14
     2f0:	9d 89       	ldd	r25, Y+21	; 0x15
     2f2:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     2f6:	18 16       	cp	r1, r24
     2f8:	4c f5       	brge	.+82     	; 0x34c <_LCD_Write+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e2       	ldi	r20, 0x20	; 32
     300:	51 e4       	ldi	r21, 0x41	; 65
     302:	6e 85       	ldd	r22, Y+14	; 0x0e
     304:	7f 85       	ldd	r23, Y+15	; 0x0f
     306:	88 89       	ldd	r24, Y+16	; 0x10
     308:	99 89       	ldd	r25, Y+17	; 0x11
     30a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	bc 01       	movw	r22, r24
     314:	cd 01       	movw	r24, r26
     316:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	9f 8b       	std	Y+23, r25	; 0x17
     320:	8e 8b       	std	Y+22, r24	; 0x16
     322:	0f c0       	rjmp	.+30     	; 0x342 <_LCD_Write+0x1b8>
     324:	88 ec       	ldi	r24, 0xC8	; 200
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	99 8f       	std	Y+25, r25	; 0x19
     32a:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     32c:	88 8d       	ldd	r24, Y+24	; 0x18
     32e:	99 8d       	ldd	r25, Y+25	; 0x19
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <_LCD_Write+0x1a6>
     334:	99 8f       	std	Y+25, r25	; 0x19
     336:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     338:	8e 89       	ldd	r24, Y+22	; 0x16
     33a:	9f 89       	ldd	r25, Y+23	; 0x17
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	9f 8b       	std	Y+23, r25	; 0x17
     340:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     342:	8e 89       	ldd	r24, Y+22	; 0x16
     344:	9f 89       	ldd	r25, Y+23	; 0x17
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	69 f7       	brne	.-38     	; 0x324 <_LCD_Write+0x19a>
     34a:	3f c0       	rjmp	.+126    	; 0x3ca <_LCD_Write+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     34c:	6a 89       	ldd	r22, Y+18	; 0x12
     34e:	7b 89       	ldd	r23, Y+19	; 0x13
     350:	8c 89       	ldd	r24, Y+20	; 0x14
     352:	9d 89       	ldd	r25, Y+21	; 0x15
     354:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	9f 8b       	std	Y+23, r25	; 0x17
     35e:	8e 8b       	std	Y+22, r24	; 0x16
     360:	8e 89       	ldd	r24, Y+22	; 0x16
     362:	9f 89       	ldd	r25, Y+23	; 0x17
     364:	9b 8f       	std	Y+27, r25	; 0x1b
     366:	8a 8f       	std	Y+26, r24	; 0x1a
     368:	8a 8d       	ldd	r24, Y+26	; 0x1a
     36a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <_LCD_Write+0x1e2>
     370:	9b 8f       	std	Y+27, r25	; 0x1b
     372:	8a 8f       	std	Y+26, r24	; 0x1a
     374:	2a c0       	rjmp	.+84     	; 0x3ca <_LCD_Write+0x240>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4f e7       	ldi	r20, 0x7F	; 127
     37c:	53 e4       	ldi	r21, 0x43	; 67
     37e:	6d 81       	ldd	r22, Y+5	; 0x05
     380:	7e 81       	ldd	r23, Y+6	; 0x06
     382:	8f 81       	ldd	r24, Y+7	; 0x07
     384:	98 85       	ldd	r25, Y+8	; 0x08
     386:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     38a:	18 16       	cp	r1, r24
     38c:	ac f4       	brge	.+42     	; 0x3b8 <_LCD_Write+0x22e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     38e:	69 85       	ldd	r22, Y+9	; 0x09
     390:	7a 85       	ldd	r23, Y+10	; 0x0a
     392:	8b 85       	ldd	r24, Y+11	; 0x0b
     394:	9c 85       	ldd	r25, Y+12	; 0x0c
     396:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9d 8f       	std	Y+29, r25	; 0x1d
     3a0:	8c 8f       	std	Y+28, r24	; 0x1c
     3a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     3a6:	9f 8f       	std	Y+31, r25	; 0x1f
     3a8:	8e 8f       	std	Y+30, r24	; 0x1e
     3aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <_LCD_Write+0x224>
     3b2:	9f 8f       	std	Y+31, r25	; 0x1f
     3b4:	8e 8f       	std	Y+30, r24	; 0x1e
     3b6:	0f c0       	rjmp	.+30     	; 0x3d6 <_LCD_Write+0x24c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3b8:	6d 81       	ldd	r22, Y+5	; 0x05
     3ba:	7e 81       	ldd	r23, Y+6	; 0x06
     3bc:	8f 81       	ldd	r24, Y+7	; 0x07
     3be:	98 85       	ldd	r25, Y+8	; 0x08
     3c0:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	8d 87       	std	Y+13, r24	; 0x0d
     3ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     3cc:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3ce:	88 a1       	ldd	r24, Y+32	; 0x20
     3d0:	8a 95       	dec	r24
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <_LCD_Write+0x246>
     3d4:	88 a3       	std	Y+32, r24	; 0x20
_delay_us(50);
}
     3d6:	a1 96       	adiw	r28, 0x21	; 33
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <LCD_WriteCommand>:
//
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	1f 92       	push	r1
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT &= ~LCD_RS;
     3f4:	8b e2       	ldi	r24, 0x2B	; 43
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	2b e2       	ldi	r18, 0x2B	; 43
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	2f 77       	andi	r18, 0x7F	; 127
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
_LCD_Write(commandToWrite);
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	0e 94 c5 00 	call	0x18a	; 0x18a <_LCD_Write>
}
     40c:	0f 90       	pop	r0
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <LCD_WriteData>:
//
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT |= LCD_RS;
     420:	8b e2       	ldi	r24, 0x2B	; 43
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	2b e2       	ldi	r18, 0x2B	; 43
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	20 68       	ori	r18, 0x80	; 128
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
_LCD_Write(dataToWrite);
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	0e 94 c5 00 	call	0x18a	; 0x18a <_LCD_Write>
}
     438:	0f 90       	pop	r0
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <LCD_WriteText+0x6>
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	9a 83       	std	Y+2, r25	; 0x02
     44c:	89 83       	std	Y+1, r24	; 0x01
while(*text)
     44e:	0b c0       	rjmp	.+22     	; 0x466 <LCD_WriteText+0x26>
  LCD_WriteData(*text++);
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	9a 81       	ldd	r25, Y+2	; 0x02
     454:	9c 01       	movw	r18, r24
     456:	2f 5f       	subi	r18, 0xFF	; 255
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	3a 83       	std	Y+2, r19	; 0x02
     45c:	29 83       	std	Y+1, r18	; 0x01
     45e:	fc 01       	movw	r30, r24
     460:	80 81       	ld	r24, Z
     462:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	fc 01       	movw	r30, r24
     46c:	80 81       	ld	r24, Z
     46e:	88 23       	and	r24, r24
     470:	79 f7       	brne	.-34     	; 0x450 <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <LCD_GoTo>:
//
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	00 d0       	rcall	.+0      	; 0x482 <LCD_GoTo+0x6>
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	6a 83       	std	Y+2, r22	; 0x02
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	98 2f       	mov	r25, r24
     48e:	92 95       	swap	r25
     490:	99 0f       	add	r25, r25
     492:	99 0f       	add	r25, r25
     494:	90 7c       	andi	r25, 0xC0	; 192
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	89 0f       	add	r24, r25
     49a:	80 68       	ori	r24, 0x80	; 128
     49c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
}
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <LCD_Clear>:
//
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	2e 97       	sbiw	r28, 0x0e	; 14
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_CLEAR);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	a0 e0       	ldi	r26, 0x00	; 0
     4ca:	b0 e4       	ldi	r27, 0x40	; 64
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	ab 83       	std	Y+3, r26	; 0x03
     4d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	4a ef       	ldi	r20, 0xFA	; 250
     4da:	54 e4       	ldi	r21, 0x44	; 68
     4dc:	69 81       	ldd	r22, Y+1	; 0x01
     4de:	7a 81       	ldd	r23, Y+2	; 0x02
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	9c 81       	ldd	r25, Y+4	; 0x04
     4e4:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	8d 83       	std	Y+5, r24	; 0x05
     4ee:	9e 83       	std	Y+6, r25	; 0x06
     4f0:	af 83       	std	Y+7, r26	; 0x07
     4f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	6d 81       	ldd	r22, Y+5	; 0x05
     4fe:	7e 81       	ldd	r23, Y+6	; 0x06
     500:	8f 81       	ldd	r24, Y+7	; 0x07
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     508:	88 23       	and	r24, r24
     50a:	2c f4       	brge	.+10     	; 0x516 <LCD_Clear+0x6c>
		__ticks = 1;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9a 87       	std	Y+10, r25	; 0x0a
     512:	89 87       	std	Y+9, r24	; 0x09
     514:	3f c0       	rjmp	.+126    	; 0x594 <LCD_Clear+0xea>
	else if (__tmp > 65535)
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	3f ef       	ldi	r19, 0xFF	; 255
     51a:	4f e7       	ldi	r20, 0x7F	; 127
     51c:	57 e4       	ldi	r21, 0x47	; 71
     51e:	6d 81       	ldd	r22, Y+5	; 0x05
     520:	7e 81       	ldd	r23, Y+6	; 0x06
     522:	8f 81       	ldd	r24, Y+7	; 0x07
     524:	98 85       	ldd	r25, Y+8	; 0x08
     526:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     52a:	18 16       	cp	r1, r24
     52c:	4c f5       	brge	.+82     	; 0x580 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e2       	ldi	r20, 0x20	; 32
     534:	51 e4       	ldi	r21, 0x41	; 65
     536:	69 81       	ldd	r22, Y+1	; 0x01
     538:	7a 81       	ldd	r23, Y+2	; 0x02
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     542:	dc 01       	movw	r26, r24
     544:	cb 01       	movw	r24, r22
     546:	bc 01       	movw	r22, r24
     548:	cd 01       	movw	r24, r26
     54a:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	9a 87       	std	Y+10, r25	; 0x0a
     554:	89 87       	std	Y+9, r24	; 0x09
     556:	0f c0       	rjmp	.+30     	; 0x576 <LCD_Clear+0xcc>
     558:	88 ec       	ldi	r24, 0xC8	; 200
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	9c 87       	std	Y+12, r25	; 0x0c
     55e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <LCD_Clear+0xba>
     568:	9c 87       	std	Y+12, r25	; 0x0c
     56a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56c:	89 85       	ldd	r24, Y+9	; 0x09
     56e:	9a 85       	ldd	r25, Y+10	; 0x0a
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	9a 87       	std	Y+10, r25	; 0x0a
     574:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     576:	89 85       	ldd	r24, Y+9	; 0x09
     578:	9a 85       	ldd	r25, Y+10	; 0x0a
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	69 f7       	brne	.-38     	; 0x558 <LCD_Clear+0xae>
     57e:	14 c0       	rjmp	.+40     	; 0x5a8 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     580:	6d 81       	ldd	r22, Y+5	; 0x05
     582:	7e 81       	ldd	r23, Y+6	; 0x06
     584:	8f 81       	ldd	r24, Y+7	; 0x07
     586:	98 85       	ldd	r25, Y+8	; 0x08
     588:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	9a 87       	std	Y+10, r25	; 0x0a
     592:	89 87       	std	Y+9, r24	; 0x09
     594:	89 85       	ldd	r24, Y+9	; 0x09
     596:	9a 85       	ldd	r25, Y+10	; 0x0a
     598:	9e 87       	std	Y+14, r25	; 0x0e
     59a:	8d 87       	std	Y+13, r24	; 0x0d
     59c:	8d 85       	ldd	r24, Y+13	; 0x0d
     59e:	9e 85       	ldd	r25, Y+14	; 0x0e
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_Clear+0xf6>
     5a4:	9e 87       	std	Y+14, r25	; 0x0e
     5a6:	8d 87       	std	Y+13, r24	; 0x0d
_delay_ms(2);
}
     5a8:	2e 96       	adiw	r28, 0x0e	; 14
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <LCD_Home>:
//
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	2e 97       	sbiw	r28, 0x0e	; 14
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_HOME);
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e4       	ldi	r27, 0x40	; 64
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	ab 83       	std	Y+3, r26	; 0x03
     5e2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4a ef       	ldi	r20, 0xFA	; 250
     5ea:	54 e4       	ldi	r21, 0x44	; 68
     5ec:	69 81       	ldd	r22, Y+1	; 0x01
     5ee:	7a 81       	ldd	r23, Y+2	; 0x02
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	9c 81       	ldd	r25, Y+4	; 0x04
     5f4:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	8d 83       	std	Y+5, r24	; 0x05
     5fe:	9e 83       	std	Y+6, r25	; 0x06
     600:	af 83       	std	Y+7, r26	; 0x07
     602:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e8       	ldi	r20, 0x80	; 128
     60a:	5f e3       	ldi	r21, 0x3F	; 63
     60c:	6d 81       	ldd	r22, Y+5	; 0x05
     60e:	7e 81       	ldd	r23, Y+6	; 0x06
     610:	8f 81       	ldd	r24, Y+7	; 0x07
     612:	98 85       	ldd	r25, Y+8	; 0x08
     614:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     618:	88 23       	and	r24, r24
     61a:	2c f4       	brge	.+10     	; 0x626 <LCD_Home+0x6c>
		__ticks = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9a 87       	std	Y+10, r25	; 0x0a
     622:	89 87       	std	Y+9, r24	; 0x09
     624:	3f c0       	rjmp	.+126    	; 0x6a4 <LCD_Home+0xea>
	else if (__tmp > 65535)
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	3f ef       	ldi	r19, 0xFF	; 255
     62a:	4f e7       	ldi	r20, 0x7F	; 127
     62c:	57 e4       	ldi	r21, 0x47	; 71
     62e:	6d 81       	ldd	r22, Y+5	; 0x05
     630:	7e 81       	ldd	r23, Y+6	; 0x06
     632:	8f 81       	ldd	r24, Y+7	; 0x07
     634:	98 85       	ldd	r25, Y+8	; 0x08
     636:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     63a:	18 16       	cp	r1, r24
     63c:	4c f5       	brge	.+82     	; 0x690 <LCD_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e2       	ldi	r20, 0x20	; 32
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	69 81       	ldd	r22, Y+1	; 0x01
     648:	7a 81       	ldd	r23, Y+2	; 0x02
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	9c 81       	ldd	r25, Y+4	; 0x04
     64e:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	9a 87       	std	Y+10, r25	; 0x0a
     664:	89 87       	std	Y+9, r24	; 0x09
     666:	0f c0       	rjmp	.+30     	; 0x686 <LCD_Home+0xcc>
     668:	88 ec       	ldi	r24, 0xC8	; 200
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	9c 87       	std	Y+12, r25	; 0x0c
     66e:	8b 87       	std	Y+11, r24	; 0x0b
     670:	8b 85       	ldd	r24, Y+11	; 0x0b
     672:	9c 85       	ldd	r25, Y+12	; 0x0c
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <LCD_Home+0xba>
     678:	9c 87       	std	Y+12, r25	; 0x0c
     67a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67c:	89 85       	ldd	r24, Y+9	; 0x09
     67e:	9a 85       	ldd	r25, Y+10	; 0x0a
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	9a 87       	std	Y+10, r25	; 0x0a
     684:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	9a 85       	ldd	r25, Y+10	; 0x0a
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	69 f7       	brne	.-38     	; 0x668 <LCD_Home+0xae>
     68e:	14 c0       	rjmp	.+40     	; 0x6b8 <LCD_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     690:	6d 81       	ldd	r22, Y+5	; 0x05
     692:	7e 81       	ldd	r23, Y+6	; 0x06
     694:	8f 81       	ldd	r24, Y+7	; 0x07
     696:	98 85       	ldd	r25, Y+8	; 0x08
     698:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9a 87       	std	Y+10, r25	; 0x0a
     6a2:	89 87       	std	Y+9, r24	; 0x09
     6a4:	89 85       	ldd	r24, Y+9	; 0x09
     6a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a8:	9e 87       	std	Y+14, r25	; 0x0e
     6aa:	8d 87       	std	Y+13, r24	; 0x0d
     6ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <LCD_Home+0xf6>
     6b4:	9e 87       	std	Y+14, r25	; 0x0e
     6b6:	8d 87       	std	Y+13, r24	; 0x0d
_delay_ms(2);
}
     6b8:	2e 96       	adiw	r28, 0x0e	; 14
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	e9 97       	sbiw	r28, 0x39	; 57
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
     6de:	84 e2       	ldi	r24, 0x24	; 36
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	24 e2       	ldi	r18, 0x24	; 36
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	21 60       	ori	r18, 0x01	; 1
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
LCD_DB5_DIR |= LCD_DB5; //
     6f0:	84 e2       	ldi	r24, 0x24	; 36
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	24 e2       	ldi	r18, 0x24	; 36
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	22 60       	ori	r18, 0x02	; 2
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
LCD_DB6_DIR |= LCD_DB6; //
     702:	84 e2       	ldi	r24, 0x24	; 36
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	24 e2       	ldi	r18, 0x24	; 36
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	24 60       	ori	r18, 0x04	; 4
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
LCD_DB7_DIR |= LCD_DB7; //
     714:	84 e2       	ldi	r24, 0x24	; 36
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	24 e2       	ldi	r18, 0x24	; 36
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	f9 01       	movw	r30, r18
     71e:	20 81       	ld	r18, Z
     720:	28 60       	ori	r18, 0x08	; 8
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
LCD_E_DIR 	|= LCD_E;   //
     726:	8a e2       	ldi	r24, 0x2A	; 42
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	2a e2       	ldi	r18, 0x2A	; 42
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	20 81       	ld	r18, Z
     732:	20 64       	ori	r18, 0x40	; 64
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
LCD_RS_DIR 	|= LCD_RS;  //
     738:	8a e2       	ldi	r24, 0x2A	; 42
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2a e2       	ldi	r18, 0x2A	; 42
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	20 68       	ori	r18, 0x80	; 128
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e7       	ldi	r26, 0x70	; 112
     750:	b1 e4       	ldi	r27, 0x41	; 65
     752:	8a 83       	std	Y+2, r24	; 0x02
     754:	9b 83       	std	Y+3, r25	; 0x03
     756:	ac 83       	std	Y+4, r26	; 0x04
     758:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	4a ef       	ldi	r20, 0xFA	; 250
     760:	54 e4       	ldi	r21, 0x44	; 68
     762:	6a 81       	ldd	r22, Y+2	; 0x02
     764:	7b 81       	ldd	r23, Y+3	; 0x03
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	9d 81       	ldd	r25, Y+5	; 0x05
     76a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	8e 83       	std	Y+6, r24	; 0x06
     774:	9f 83       	std	Y+7, r25	; 0x07
     776:	a8 87       	std	Y+8, r26	; 0x08
     778:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e8       	ldi	r20, 0x80	; 128
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	7f 81       	ldd	r23, Y+7	; 0x07
     786:	88 85       	ldd	r24, Y+8	; 0x08
     788:	99 85       	ldd	r25, Y+9	; 0x09
     78a:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     78e:	88 23       	and	r24, r24
     790:	2c f4       	brge	.+10     	; 0x79c <LCD_Initalize+0xd2>
		__ticks = 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	9b 87       	std	Y+11, r25	; 0x0b
     798:	8a 87       	std	Y+10, r24	; 0x0a
     79a:	3f c0       	rjmp	.+126    	; 0x81a <LCD_Initalize+0x150>
	else if (__tmp > 65535)
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	3f ef       	ldi	r19, 0xFF	; 255
     7a0:	4f e7       	ldi	r20, 0x7F	; 127
     7a2:	57 e4       	ldi	r21, 0x47	; 71
     7a4:	6e 81       	ldd	r22, Y+6	; 0x06
     7a6:	7f 81       	ldd	r23, Y+7	; 0x07
     7a8:	88 85       	ldd	r24, Y+8	; 0x08
     7aa:	99 85       	ldd	r25, Y+9	; 0x09
     7ac:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	4c f5       	brge	.+82     	; 0x806 <LCD_Initalize+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e2       	ldi	r20, 0x20	; 32
     7ba:	51 e4       	ldi	r21, 0x41	; 65
     7bc:	6a 81       	ldd	r22, Y+2	; 0x02
     7be:	7b 81       	ldd	r23, Y+3	; 0x03
     7c0:	8c 81       	ldd	r24, Y+4	; 0x04
     7c2:	9d 81       	ldd	r25, Y+5	; 0x05
     7c4:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	bc 01       	movw	r22, r24
     7ce:	cd 01       	movw	r24, r26
     7d0:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	9b 87       	std	Y+11, r25	; 0x0b
     7da:	8a 87       	std	Y+10, r24	; 0x0a
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <LCD_Initalize+0x132>
     7de:	88 ec       	ldi	r24, 0xC8	; 200
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	9d 87       	std	Y+13, r25	; 0x0d
     7e4:	8c 87       	std	Y+12, r24	; 0x0c
     7e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <LCD_Initalize+0x120>
     7ee:	9d 87       	std	Y+13, r25	; 0x0d
     7f0:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f2:	8a 85       	ldd	r24, Y+10	; 0x0a
     7f4:	9b 85       	ldd	r25, Y+11	; 0x0b
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	9b 87       	std	Y+11, r25	; 0x0b
     7fa:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     7fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	69 f7       	brne	.-38     	; 0x7de <LCD_Initalize+0x114>
     804:	14 c0       	rjmp	.+40     	; 0x82e <LCD_Initalize+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     806:	6e 81       	ldd	r22, Y+6	; 0x06
     808:	7f 81       	ldd	r23, Y+7	; 0x07
     80a:	88 85       	ldd	r24, Y+8	; 0x08
     80c:	99 85       	ldd	r25, Y+9	; 0x09
     80e:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     812:	dc 01       	movw	r26, r24
     814:	cb 01       	movw	r24, r22
     816:	9b 87       	std	Y+11, r25	; 0x0b
     818:	8a 87       	std	Y+10, r24	; 0x0a
     81a:	8a 85       	ldd	r24, Y+10	; 0x0a
     81c:	9b 85       	ldd	r25, Y+11	; 0x0b
     81e:	9f 87       	std	Y+15, r25	; 0x0f
     820:	8e 87       	std	Y+14, r24	; 0x0e
     822:	8e 85       	ldd	r24, Y+14	; 0x0e
     824:	9f 85       	ldd	r25, Y+15	; 0x0f
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <LCD_Initalize+0x15c>
     82a:	9f 87       	std	Y+15, r25	; 0x0f
     82c:	8e 87       	std	Y+14, r24	; 0x0e
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
     82e:	8b e2       	ldi	r24, 0x2B	; 43
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	2b e2       	ldi	r18, 0x2B	; 43
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	f9 01       	movw	r30, r18
     838:	20 81       	ld	r18, Z
     83a:	2f 77       	andi	r18, 0x7F	; 127
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
     840:	8b e2       	ldi	r24, 0x2B	; 43
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2b e2       	ldi	r18, 0x2B	; 43
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	f9 01       	movw	r30, r18
     84a:	20 81       	ld	r18, Z
     84c:	2f 7b       	andi	r18, 0xBF	; 191
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     852:	19 82       	std	Y+1, r1	; 0x01
     854:	8a c0       	rjmp	.+276    	; 0x96a <__stack+0x6b>
  {
  LCD_E_PORT |= LCD_E; //  E = 1
     856:	8b e2       	ldi	r24, 0x2B	; 43
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	2b e2       	ldi	r18, 0x2B	; 43
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	20 64       	ori	r18, 0x40	; 64
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
  _LCD_OutNibble(0x03); // tryb 8-bitowy
     868:	83 e0       	ldi	r24, 0x03	; 3
     86a:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
     86e:	8b e2       	ldi	r24, 0x2B	; 43
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	2b e2       	ldi	r18, 0x2B	; 43
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	f9 01       	movw	r30, r18
     878:	20 81       	ld	r18, Z
     87a:	2f 7b       	andi	r18, 0xBF	; 191
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a0 ea       	ldi	r26, 0xA0	; 160
     886:	b0 e4       	ldi	r27, 0x40	; 64
     888:	88 8b       	std	Y+16, r24	; 0x10
     88a:	99 8b       	std	Y+17, r25	; 0x11
     88c:	aa 8b       	std	Y+18, r26	; 0x12
     88e:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	4a ef       	ldi	r20, 0xFA	; 250
     896:	54 e4       	ldi	r21, 0x44	; 68
     898:	68 89       	ldd	r22, Y+16	; 0x10
     89a:	79 89       	ldd	r23, Y+17	; 0x11
     89c:	8a 89       	ldd	r24, Y+18	; 0x12
     89e:	9b 89       	ldd	r25, Y+19	; 0x13
     8a0:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	8c 8b       	std	Y+20, r24	; 0x14
     8aa:	9d 8b       	std	Y+21, r25	; 0x15
     8ac:	ae 8b       	std	Y+22, r26	; 0x16
     8ae:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e8       	ldi	r20, 0x80	; 128
     8b6:	5f e3       	ldi	r21, 0x3F	; 63
     8b8:	6c 89       	ldd	r22, Y+20	; 0x14
     8ba:	7d 89       	ldd	r23, Y+21	; 0x15
     8bc:	8e 89       	ldd	r24, Y+22	; 0x16
     8be:	9f 89       	ldd	r25, Y+23	; 0x17
     8c0:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     8c4:	88 23       	and	r24, r24
     8c6:	2c f4       	brge	.+10     	; 0x8d2 <LCD_Initalize+0x208>
		__ticks = 1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	99 8f       	std	Y+25, r25	; 0x19
     8ce:	88 8f       	std	Y+24, r24	; 0x18
     8d0:	3f c0       	rjmp	.+126    	; 0x950 <__stack+0x51>
	else if (__tmp > 65535)
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	3f ef       	ldi	r19, 0xFF	; 255
     8d6:	4f e7       	ldi	r20, 0x7F	; 127
     8d8:	57 e4       	ldi	r21, 0x47	; 71
     8da:	6c 89       	ldd	r22, Y+20	; 0x14
     8dc:	7d 89       	ldd	r23, Y+21	; 0x15
     8de:	8e 89       	ldd	r24, Y+22	; 0x16
     8e0:	9f 89       	ldd	r25, Y+23	; 0x17
     8e2:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     8e6:	18 16       	cp	r1, r24
     8e8:	4c f5       	brge	.+82     	; 0x93c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e2       	ldi	r20, 0x20	; 32
     8f0:	51 e4       	ldi	r21, 0x41	; 65
     8f2:	68 89       	ldd	r22, Y+16	; 0x10
     8f4:	79 89       	ldd	r23, Y+17	; 0x11
     8f6:	8a 89       	ldd	r24, Y+18	; 0x12
     8f8:	9b 89       	ldd	r25, Y+19	; 0x13
     8fa:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	bc 01       	movw	r22, r24
     904:	cd 01       	movw	r24, r26
     906:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	99 8f       	std	Y+25, r25	; 0x19
     910:	88 8f       	std	Y+24, r24	; 0x18
     912:	0f c0       	rjmp	.+30     	; 0x932 <__stack+0x33>
     914:	88 ec       	ldi	r24, 0xC8	; 200
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	9b 8f       	std	Y+27, r25	; 0x1b
     91a:	8a 8f       	std	Y+26, r24	; 0x1a
     91c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     91e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0x21>
     924:	9b 8f       	std	Y+27, r25	; 0x1b
     926:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     928:	88 8d       	ldd	r24, Y+24	; 0x18
     92a:	99 8d       	ldd	r25, Y+25	; 0x19
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	99 8f       	std	Y+25, r25	; 0x19
     930:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     932:	88 8d       	ldd	r24, Y+24	; 0x18
     934:	99 8d       	ldd	r25, Y+25	; 0x19
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	69 f7       	brne	.-38     	; 0x914 <__stack+0x15>
     93a:	14 c0       	rjmp	.+40     	; 0x964 <__stack+0x65>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93c:	6c 89       	ldd	r22, Y+20	; 0x14
     93e:	7d 89       	ldd	r23, Y+21	; 0x15
     940:	8e 89       	ldd	r24, Y+22	; 0x16
     942:	9f 89       	ldd	r25, Y+23	; 0x17
     944:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	99 8f       	std	Y+25, r25	; 0x19
     94e:	88 8f       	std	Y+24, r24	; 0x18
     950:	88 8d       	ldd	r24, Y+24	; 0x18
     952:	99 8d       	ldd	r25, Y+25	; 0x19
     954:	9d 8f       	std	Y+29, r25	; 0x1d
     956:	8c 8f       	std	Y+28, r24	; 0x1c
     958:	8c 8d       	ldd	r24, Y+28	; 0x1c
     95a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <__stack+0x5d>
     960:	9d 8f       	std	Y+29, r25	; 0x1d
     962:	8c 8f       	std	Y+28, r24	; 0x1c
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	08 f4       	brcc	.+2      	; 0x972 <__stack+0x73>
     970:	72 cf       	rjmp	.-284    	; 0x856 <LCD_Initalize+0x18c>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
     972:	8b e2       	ldi	r24, 0x2B	; 43
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	2b e2       	ldi	r18, 0x2B	; 43
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	20 64       	ori	r18, 0x40	; 64
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
_LCD_OutNibble(0x02); // tryb 4-bitowy
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
     98a:	8b e2       	ldi	r24, 0x2B	; 43
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2b e2       	ldi	r18, 0x2B	; 43
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	2f 7b       	andi	r18, 0xBF	; 191
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	a0 e8       	ldi	r26, 0x80	; 128
     9a2:	bf e3       	ldi	r27, 0x3F	; 63
     9a4:	8e 8f       	std	Y+30, r24	; 0x1e
     9a6:	9f 8f       	std	Y+31, r25	; 0x1f
     9a8:	a8 a3       	std	Y+32, r26	; 0x20
     9aa:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	4a ef       	ldi	r20, 0xFA	; 250
     9b2:	54 e4       	ldi	r21, 0x44	; 68
     9b4:	6e 8d       	ldd	r22, Y+30	; 0x1e
     9b6:	7f 8d       	ldd	r23, Y+31	; 0x1f
     9b8:	88 a1       	ldd	r24, Y+32	; 0x20
     9ba:	99 a1       	ldd	r25, Y+33	; 0x21
     9bc:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     9c0:	dc 01       	movw	r26, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	8a a3       	std	Y+34, r24	; 0x22
     9c6:	9b a3       	std	Y+35, r25	; 0x23
     9c8:	ac a3       	std	Y+36, r26	; 0x24
     9ca:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e8       	ldi	r20, 0x80	; 128
     9d2:	5f e3       	ldi	r21, 0x3F	; 63
     9d4:	6a a1       	ldd	r22, Y+34	; 0x22
     9d6:	7b a1       	ldd	r23, Y+35	; 0x23
     9d8:	8c a1       	ldd	r24, Y+36	; 0x24
     9da:	9d a1       	ldd	r25, Y+37	; 0x25
     9dc:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     9e0:	88 23       	and	r24, r24
     9e2:	2c f4       	brge	.+10     	; 0x9ee <__stack+0xef>
		__ticks = 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	9f a3       	std	Y+39, r25	; 0x27
     9ea:	8e a3       	std	Y+38, r24	; 0x26
     9ec:	3f c0       	rjmp	.+126    	; 0xa6c <__stack+0x16d>
	else if (__tmp > 65535)
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	3f ef       	ldi	r19, 0xFF	; 255
     9f2:	4f e7       	ldi	r20, 0x7F	; 127
     9f4:	57 e4       	ldi	r21, 0x47	; 71
     9f6:	6a a1       	ldd	r22, Y+34	; 0x22
     9f8:	7b a1       	ldd	r23, Y+35	; 0x23
     9fa:	8c a1       	ldd	r24, Y+36	; 0x24
     9fc:	9d a1       	ldd	r25, Y+37	; 0x25
     9fe:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     a02:	18 16       	cp	r1, r24
     a04:	4c f5       	brge	.+82     	; 0xa58 <__stack+0x159>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e2       	ldi	r20, 0x20	; 32
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     a10:	7f 8d       	ldd	r23, Y+31	; 0x1f
     a12:	88 a1       	ldd	r24, Y+32	; 0x20
     a14:	99 a1       	ldd	r25, Y+33	; 0x21
     a16:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	bc 01       	movw	r22, r24
     a20:	cd 01       	movw	r24, r26
     a22:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	9f a3       	std	Y+39, r25	; 0x27
     a2c:	8e a3       	std	Y+38, r24	; 0x26
     a2e:	0f c0       	rjmp	.+30     	; 0xa4e <__stack+0x14f>
     a30:	88 ec       	ldi	r24, 0xC8	; 200
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	99 a7       	std	Y+41, r25	; 0x29
     a36:	88 a7       	std	Y+40, r24	; 0x28
     a38:	88 a5       	ldd	r24, Y+40	; 0x28
     a3a:	99 a5       	ldd	r25, Y+41	; 0x29
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <__stack+0x13d>
     a40:	99 a7       	std	Y+41, r25	; 0x29
     a42:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a44:	8e a1       	ldd	r24, Y+38	; 0x26
     a46:	9f a1       	ldd	r25, Y+39	; 0x27
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9f a3       	std	Y+39, r25	; 0x27
     a4c:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4e:	8e a1       	ldd	r24, Y+38	; 0x26
     a50:	9f a1       	ldd	r25, Y+39	; 0x27
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	69 f7       	brne	.-38     	; 0xa30 <__stack+0x131>
     a56:	14 c0       	rjmp	.+40     	; 0xa80 <__stack+0x181>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a58:	6a a1       	ldd	r22, Y+34	; 0x22
     a5a:	7b a1       	ldd	r23, Y+35	; 0x23
     a5c:	8c a1       	ldd	r24, Y+36	; 0x24
     a5e:	9d a1       	ldd	r25, Y+37	; 0x25
     a60:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	9f a3       	std	Y+39, r25	; 0x27
     a6a:	8e a3       	std	Y+38, r24	; 0x26
     a6c:	8e a1       	ldd	r24, Y+38	; 0x26
     a6e:	9f a1       	ldd	r25, Y+39	; 0x27
     a70:	9b a7       	std	Y+43, r25	; 0x2b
     a72:	8a a7       	std	Y+42, r24	; 0x2a
     a74:	8a a5       	ldd	r24, Y+42	; 0x2a
     a76:	9b a5       	ldd	r25, Y+43	; 0x2b
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <__stack+0x179>
     a7c:	9b a7       	std	Y+43, r25	; 0x2b
     a7e:	8a a7       	std	Y+42, r24	; 0x2a

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
     a80:	88 e2       	ldi	r24, 0x28	; 40
     a82:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e4       	ldi	r27, 0x40	; 64
     a9a:	8c a7       	std	Y+44, r24	; 0x2c
     a9c:	9d a7       	std	Y+45, r25	; 0x2d
     a9e:	ae a7       	std	Y+46, r26	; 0x2e
     aa0:	bf a7       	std	Y+47, r27	; 0x2f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	4a ef       	ldi	r20, 0xFA	; 250
     aa8:	54 e4       	ldi	r21, 0x44	; 68
     aaa:	6c a5       	ldd	r22, Y+44	; 0x2c
     aac:	7d a5       	ldd	r23, Y+45	; 0x2d
     aae:	8e a5       	ldd	r24, Y+46	; 0x2e
     ab0:	9f a5       	ldd	r25, Y+47	; 0x2f
     ab2:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     ab6:	dc 01       	movw	r26, r24
     ab8:	cb 01       	movw	r24, r22
     aba:	88 ab       	std	Y+48, r24	; 0x30
     abc:	99 ab       	std	Y+49, r25	; 0x31
     abe:	aa ab       	std	Y+50, r26	; 0x32
     ac0:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	5f e3       	ldi	r21, 0x3F	; 63
     aca:	68 a9       	ldd	r22, Y+48	; 0x30
     acc:	79 a9       	ldd	r23, Y+49	; 0x31
     ace:	8a a9       	ldd	r24, Y+50	; 0x32
     ad0:	9b a9       	ldd	r25, Y+51	; 0x33
     ad2:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     ad6:	88 23       	and	r24, r24
     ad8:	2c f4       	brge	.+10     	; 0xae4 <__stack+0x1e5>
		__ticks = 1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	9d ab       	std	Y+53, r25	; 0x35
     ae0:	8c ab       	std	Y+52, r24	; 0x34
     ae2:	3f c0       	rjmp	.+126    	; 0xb62 <__stack+0x263>
	else if (__tmp > 65535)
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	3f ef       	ldi	r19, 0xFF	; 255
     ae8:	4f e7       	ldi	r20, 0x7F	; 127
     aea:	57 e4       	ldi	r21, 0x47	; 71
     aec:	68 a9       	ldd	r22, Y+48	; 0x30
     aee:	79 a9       	ldd	r23, Y+49	; 0x31
     af0:	8a a9       	ldd	r24, Y+50	; 0x32
     af2:	9b a9       	ldd	r25, Y+51	; 0x33
     af4:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     af8:	18 16       	cp	r1, r24
     afa:	4c f5       	brge	.+82     	; 0xb4e <__stack+0x24f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e2       	ldi	r20, 0x20	; 32
     b02:	51 e4       	ldi	r21, 0x41	; 65
     b04:	6c a5       	ldd	r22, Y+44	; 0x2c
     b06:	7d a5       	ldd	r23, Y+45	; 0x2d
     b08:	8e a5       	ldd	r24, Y+46	; 0x2e
     b0a:	9f a5       	ldd	r25, Y+47	; 0x2f
     b0c:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	bc 01       	movw	r22, r24
     b16:	cd 01       	movw	r24, r26
     b18:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	9d ab       	std	Y+53, r25	; 0x35
     b22:	8c ab       	std	Y+52, r24	; 0x34
     b24:	0f c0       	rjmp	.+30     	; 0xb44 <__stack+0x245>
     b26:	88 ec       	ldi	r24, 0xC8	; 200
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	9f ab       	std	Y+55, r25	; 0x37
     b2c:	8e ab       	std	Y+54, r24	; 0x36
     b2e:	8e a9       	ldd	r24, Y+54	; 0x36
     b30:	9f a9       	ldd	r25, Y+55	; 0x37
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <__stack+0x233>
     b36:	9f ab       	std	Y+55, r25	; 0x37
     b38:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3a:	8c a9       	ldd	r24, Y+52	; 0x34
     b3c:	9d a9       	ldd	r25, Y+53	; 0x35
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	9d ab       	std	Y+53, r25	; 0x35
     b42:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b44:	8c a9       	ldd	r24, Y+52	; 0x34
     b46:	9d a9       	ldd	r25, Y+53	; 0x35
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	69 f7       	brne	.-38     	; 0xb26 <__stack+0x227>
     b4c:	14 c0       	rjmp	.+40     	; 0xb76 <__stack+0x277>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b4e:	68 a9       	ldd	r22, Y+48	; 0x30
     b50:	79 a9       	ldd	r23, Y+49	; 0x31
     b52:	8a a9       	ldd	r24, Y+50	; 0x32
     b54:	9b a9       	ldd	r25, Y+51	; 0x33
     b56:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	9d ab       	std	Y+53, r25	; 0x35
     b60:	8c ab       	std	Y+52, r24	; 0x34
     b62:	8c a9       	ldd	r24, Y+52	; 0x34
     b64:	9d a9       	ldd	r25, Y+53	; 0x35
     b66:	99 af       	std	Y+57, r25	; 0x39
     b68:	88 af       	std	Y+56, r24	; 0x38
     b6a:	88 ad       	ldd	r24, Y+56	; 0x38
     b6c:	99 ad       	ldd	r25, Y+57	; 0x39
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <__stack+0x26f>
     b72:	99 af       	std	Y+57, r25	; 0x39
     b74:	88 af       	std	Y+56, r24	; 0x38
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
     b76:	86 e0       	ldi	r24, 0x06	; 6
     b78:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
     b7c:	8c e0       	ldi	r24, 0x0C	; 12
     b7e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteCommand>
}
     b82:	e9 96       	adiw	r28, 0x39	; 57
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <uart_init>:
#define BAUD 300                                  // define baud

 volatile char i;
// function to initialize UART
void uart_init( long int baud )
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	2a 97       	sbiw	r28, 0x0a	; 10
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	6b 83       	std	Y+3, r22	; 0x03
     baa:	7c 83       	std	Y+4, r23	; 0x04
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	9e 83       	std	Y+6, r25	; 0x06
#if F_CPU > 8000000UL
        uint16_t ubrr_cal = F_CPU/16/baud-1;
	UCSR0A &= ~(1<<U2X0);
#else
	uint16_t ubrr_cal = F_CPU/8/baud-1;
     bb0:	2b 81       	ldd	r18, Y+3	; 0x03
     bb2:	3c 81       	ldd	r19, Y+4	; 0x04
     bb4:	4d 81       	ldd	r20, Y+5	; 0x05
     bb6:	5e 81       	ldd	r21, Y+6	; 0x06
     bb8:	80 e4       	ldi	r24, 0x40	; 64
     bba:	92 e4       	ldi	r25, 0x42	; 66
     bbc:	af e0       	ldi	r26, 0x0F	; 15
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	0e 94 11 08 	call	0x1022	; 0x1022 <__udivmodsi4>
     bc8:	da 01       	movw	r26, r20
     bca:	c9 01       	movw	r24, r18
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	9a 83       	std	Y+2, r25	; 0x02
     bd0:	89 83       	std	Y+1, r24	; 0x01
	UCSR0A |= (1<<U2X0);
     bd2:	80 ec       	ldi	r24, 0xC0	; 192
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	20 ec       	ldi	r18, 0xC0	; 192
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	22 60       	ori	r18, 0x02	; 2
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
#endif

	UBRR0H = (uint8_t)(ubrr_cal>>8);//konfiguracja baud
     be4:	85 ec       	ldi	r24, 0xC5	; 197
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	29 81       	ldd	r18, Y+1	; 0x01
     bea:	3a 81       	ldd	r19, Y+2	; 0x02
     bec:	23 2f       	mov	r18, r19
     bee:	33 27       	eor	r19, r19
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
	UBRR0L = (uint8_t)ubrr_cal;
     bf4:	84 ec       	ldi	r24, 0xC4	; 196
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	29 81       	ldd	r18, Y+1	; 0x01
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);//w³¹czenie UART
     bfe:	81 ec       	ldi	r24, 0xC1	; 193
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	28 e1       	ldi	r18, 0x18	; 24
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
	UBRR0H = (uint8_t)(baud>>8);//konfiguracja baud
     c08:	25 ec       	ldi	r18, 0xC5	; 197
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	ad 81       	ldd	r26, Y+5	; 0x05
     c12:	be 81       	ldd	r27, Y+6	; 0x06
     c14:	89 2f       	mov	r24, r25
     c16:	9a 2f       	mov	r25, r26
     c18:	ab 2f       	mov	r26, r27
     c1a:	bb 27       	eor	r27, r27
     c1c:	a7 fd       	sbrc	r26, 7
     c1e:	ba 95       	dec	r27
     c20:	f9 01       	movw	r30, r18
     c22:	80 83       	st	Z, r24
		UBRR0L = (uint8_t)baud;
     c24:	84 ec       	ldi	r24, 0xC4	; 196
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	2b 81       	ldd	r18, Y+3	; 0x03
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);//w³¹czenie UART
     c2e:	81 ec       	ldi	r24, 0xC1	; 193
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	28 e1       	ldi	r18, 0x18	; 24
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
		UCSR0C = UCSR0C=(1<<7)|(0<<6)|(0<<5)|(0<<4)|(0<<3)|(0<<2)|(1<<1)|(1<<0);
     c38:	82 ec       	ldi	r24, 0xC2	; 194
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	22 ec       	ldi	r18, 0xC2	; 194
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	43 e8       	ldi	r20, 0x83	; 131
     c42:	f9 01       	movw	r30, r18
     c44:	40 83       	st	Z, r20
     c46:	fc 01       	movw	r30, r24
     c48:	40 83       	st	Z, r20

	UCSR0B |=(1<<RXCIE0); // w³¹czenie przerwania UART-a
     c4a:	81 ec       	ldi	r24, 0xC1	; 193
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	21 ec       	ldi	r18, 0xC1	; 193
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	f9 01       	movw	r30, r18
     c54:	20 81       	ld	r18, Z
     c56:	20 68       	ori	r18, 0x80	; 128
     c58:	fc 01       	movw	r30, r24
     c5a:	20 83       	st	Z, r18
}
     c5c:	2a 96       	adiw	r28, 0x0a	; 10
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <uart_recieve>:


// function to receive data
unsigned char uart_recieve (void)
{
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A) & (1<<RXC0));                   // wait while data is being received
     c76:	00 00       	nop
     c78:	80 ec       	ldi	r24, 0xC0	; 192
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
    return UDR0;                                   // return 8-bit data
     c80:	86 ec       	ldi	r24, 0xC6	; 198
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z

}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <__vector_18>:

ISR(USART_RX_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	00 90 5f 00 	lds	r0, 0x005F
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62

	// if (USART_RXC_vect == 1 ) return;

	    // rssiValue = (0 - RFM69_readCOM(REG_RSSIVALUE)/2);    // odczyt rssi
	     i = UDR0;
     cae:	86 ec       	ldi	r24, 0xC6	; 198
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	80 81       	ld	r24, Z
     cb6:	80 93 18 01 	sts	0x0118, r24
	  //   RFM69_ReadRamka(buffer); // odczyt ramki i wpisanie jej do zminnej
	     PORTC |= (1<<PC5);
     cba:	88 e2       	ldi	r24, 0x28	; 40
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	28 e2       	ldi	r18, 0x28	; 40
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	f9 01       	movw	r30, r18
     cc4:	20 81       	ld	r18, Z
     cc6:	20 62       	ori	r18, 0x20	; 32
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
     LCD_GoTo(0,1);
     LCD_WriteData(i);
     LCD_WriteText("RX");
     LCD_GoTo(4,1);
  //   _delay_ms(5000);*/
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	00 92 5f 00 	sts	0x005F, r0
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <main>:

int main(void)
{
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	aa 97       	sbiw	r28, 0x2a	; 42
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
	DDRC|=(1<<PC5);
     cfc:	87 e2       	ldi	r24, 0x27	; 39
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	27 e2       	ldi	r18, 0x27	; 39
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	20 62       	ori	r18, 0x20	; 32
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
   	LCD_Initalize();
     d0e:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_Initalize>
	LCD_WriteText("ARD LEONARD");
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteText>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	aa e7       	ldi	r26, 0x7A	; 122
     d20:	b4 e4       	ldi	r27, 0x44	; 68
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	9a 83       	std	Y+2, r25	; 0x02
     d26:	ab 83       	std	Y+3, r26	; 0x03
     d28:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a ef       	ldi	r20, 0xFA	; 250
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	69 81       	ldd	r22, Y+1	; 0x01
     d34:	7a 81       	ldd	r23, Y+2	; 0x02
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	af 83       	std	Y+7, r26	; 0x07
     d48:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	6d 81       	ldd	r22, Y+5	; 0x05
     d54:	7e 81       	ldd	r23, Y+6	; 0x06
     d56:	8f 81       	ldd	r24, Y+7	; 0x07
     d58:	98 85       	ldd	r25, Y+8	; 0x08
     d5a:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <main+0x84>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9a 87       	std	Y+10, r25	; 0x0a
     d68:	89 87       	std	Y+9, r24	; 0x09
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <main+0x102>
	else if (__tmp > 65535)
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	6d 81       	ldd	r22, Y+5	; 0x05
     d76:	7e 81       	ldd	r23, Y+6	; 0x06
     d78:	8f 81       	ldd	r24, Y+7	; 0x07
     d7a:	98 85       	ldd	r25, Y+8	; 0x08
     d7c:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	69 81       	ldd	r22, Y+1	; 0x01
     d8e:	7a 81       	ldd	r23, Y+2	; 0x02
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9a 87       	std	Y+10, r25	; 0x0a
     daa:	89 87       	std	Y+9, r24	; 0x09
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <main+0xe4>
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 87       	std	Y+12, r25	; 0x0c
     db4:	8b 87       	std	Y+11, r24	; 0x0b
     db6:	8b 85       	ldd	r24, Y+11	; 0x0b
     db8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <main+0xd2>
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	89 85       	ldd	r24, Y+9	; 0x09
     dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9a 87       	std	Y+10, r25	; 0x0a
     dca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <main+0xc6>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6d 81       	ldd	r22, Y+5	; 0x05
     dd8:	7e 81       	ldd	r23, Y+6	; 0x06
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9a 87       	std	Y+10, r25	; 0x0a
     de8:	89 87       	std	Y+9, r24	; 0x09
     dea:	89 85       	ldd	r24, Y+9	; 0x09
     dec:	9a 85       	ldd	r25, Y+10	; 0x0a
     dee:	9e 87       	std	Y+14, r25	; 0x0e
     df0:	8d 87       	std	Y+13, r24	; 0x0d
     df2:	8d 85       	ldd	r24, Y+13	; 0x0d
     df4:	9e 85       	ldd	r25, Y+14	; 0x0e
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <main+0x10e>
     dfa:	9e 87       	std	Y+14, r25	; 0x0e
     dfc:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	 uart_init( BAUD );
     dfe:	6c e2       	ldi	r22, 0x2C	; 44
     e00:	71 e0       	ldi	r23, 0x01	; 1
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 ca 05 	call	0xb94	; 0xb94 <uart_init>
	 LCD_WriteText("LCD Test");
     e0a:	8c e0       	ldi	r24, 0x0C	; 12
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteText>
    sei();
     e12:	78 94       	sei
    while(1)
    {
    	// i = uart_recieve();
         LCD_GoTo(4,0);
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_GoTo>
         LCD_WriteText("LCD Test");
     e1c:	8c e0       	ldi	r24, 0x0C	; 12
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteText>
         LCD_GoTo(0,1);
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_GoTo>

             LCD_WriteText("RX");
     e2c:	85 e1       	ldi	r24, 0x15	; 21
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteText>
             LCD_GoTo(4,1);
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_GoTo>
             LCD_WriteData(i);
     e3c:	80 91 18 01 	lds	r24, 0x0118
     e40:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_WriteData>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	aa ef       	ldi	r26, 0xFA	; 250
     e4a:	b3 e4       	ldi	r27, 0x43	; 67
     e4c:	8f 87       	std	Y+15, r24	; 0x0f
     e4e:	98 8b       	std	Y+16, r25	; 0x10
     e50:	a9 8b       	std	Y+17, r26	; 0x11
     e52:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4a ef       	ldi	r20, 0xFA	; 250
     e5a:	54 e4       	ldi	r21, 0x44	; 68
     e5c:	6f 85       	ldd	r22, Y+15	; 0x0f
     e5e:	78 89       	ldd	r23, Y+16	; 0x10
     e60:	89 89       	ldd	r24, Y+17	; 0x11
     e62:	9a 89       	ldd	r25, Y+18	; 0x12
     e64:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	8b 8b       	std	Y+19, r24	; 0x13
     e6e:	9c 8b       	std	Y+20, r25	; 0x14
     e70:	ad 8b       	std	Y+21, r26	; 0x15
     e72:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	6b 89       	ldd	r22, Y+19	; 0x13
     e7e:	7c 89       	ldd	r23, Y+20	; 0x14
     e80:	8d 89       	ldd	r24, Y+21	; 0x15
     e82:	9e 89       	ldd	r25, Y+22	; 0x16
     e84:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     e88:	88 23       	and	r24, r24
     e8a:	2c f4       	brge	.+10     	; 0xe96 <main+0x1ae>
		__ticks = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	98 8f       	std	Y+24, r25	; 0x18
     e92:	8f 8b       	std	Y+23, r24	; 0x17
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <main+0x22c>
	else if (__tmp > 65535)
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	6b 89       	ldd	r22, Y+19	; 0x13
     ea0:	7c 89       	ldd	r23, Y+20	; 0x14
     ea2:	8d 89       	ldd	r24, Y+21	; 0x15
     ea4:	9e 89       	ldd	r25, Y+22	; 0x16
     ea6:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     eaa:	18 16       	cp	r1, r24
     eac:	4c f5       	brge	.+82     	; 0xf00 <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	6f 85       	ldd	r22, Y+15	; 0x0f
     eb8:	78 89       	ldd	r23, Y+16	; 0x10
     eba:	89 89       	ldd	r24, Y+17	; 0x11
     ebc:	9a 89       	ldd	r25, Y+18	; 0x12
     ebe:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	98 8f       	std	Y+24, r25	; 0x18
     ed4:	8f 8b       	std	Y+23, r24	; 0x17
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <main+0x20e>
     ed8:	88 ec       	ldi	r24, 0xC8	; 200
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9a 8f       	std	Y+26, r25	; 0x1a
     ede:	89 8f       	std	Y+25, r24	; 0x19
     ee0:	89 8d       	ldd	r24, Y+25	; 0x19
     ee2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <main+0x1fc>
     ee8:	9a 8f       	std	Y+26, r25	; 0x1a
     eea:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	8f 89       	ldd	r24, Y+23	; 0x17
     eee:	98 8d       	ldd	r25, Y+24	; 0x18
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	98 8f       	std	Y+24, r25	; 0x18
     ef4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef6:	8f 89       	ldd	r24, Y+23	; 0x17
     ef8:	98 8d       	ldd	r25, Y+24	; 0x18
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	69 f7       	brne	.-38     	; 0xed8 <main+0x1f0>
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f00:	6b 89       	ldd	r22, Y+19	; 0x13
     f02:	7c 89       	ldd	r23, Y+20	; 0x14
     f04:	8d 89       	ldd	r24, Y+21	; 0x15
     f06:	9e 89       	ldd	r25, Y+22	; 0x16
     f08:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	98 8f       	std	Y+24, r25	; 0x18
     f12:	8f 8b       	std	Y+23, r24	; 0x17
     f14:	8f 89       	ldd	r24, Y+23	; 0x17
     f16:	98 8d       	ldd	r25, Y+24	; 0x18
     f18:	9c 8f       	std	Y+28, r25	; 0x1c
     f1a:	8b 8f       	std	Y+27, r24	; 0x1b
     f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <main+0x238>
     f24:	9c 8f       	std	Y+28, r25	; 0x1c
     f26:	8b 8f       	std	Y+27, r24	; 0x1b
           	  //   RFM69_ReadRamka(buffer); // odczyt ramki i wpisanie jej do zminnej
             _delay_ms(500);
             PORTC ^= (1<<PC5);
     f28:	88 e2       	ldi	r24, 0x28	; 40
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	28 e2       	ldi	r18, 0x28	; 40
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	30 81       	ld	r19, Z
     f34:	20 e2       	ldi	r18, 0x20	; 32
     f36:	23 27       	eor	r18, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	aa ef       	ldi	r26, 0xFA	; 250
     f42:	b3 e4       	ldi	r27, 0x43	; 67
     f44:	8d 8f       	std	Y+29, r24	; 0x1d
     f46:	9e 8f       	std	Y+30, r25	; 0x1e
     f48:	af 8f       	std	Y+31, r26	; 0x1f
     f4a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4a ef       	ldi	r20, 0xFA	; 250
     f52:	54 e4       	ldi	r21, 0x44	; 68
     f54:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f56:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f58:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f5a:	98 a1       	ldd	r25, Y+32	; 0x20
     f5c:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	89 a3       	std	Y+33, r24	; 0x21
     f66:	9a a3       	std	Y+34, r25	; 0x22
     f68:	ab a3       	std	Y+35, r26	; 0x23
     f6a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	69 a1       	ldd	r22, Y+33	; 0x21
     f76:	7a a1       	ldd	r23, Y+34	; 0x22
     f78:	8b a1       	ldd	r24, Y+35	; 0x23
     f7a:	9c a1       	ldd	r25, Y+36	; 0x24
     f7c:	0e 94 98 08 	call	0x1130	; 0x1130 <__cmpsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <main+0x2a6>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9e a3       	std	Y+38, r25	; 0x26
     f8a:	8d a3       	std	Y+37, r24	; 0x25
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <main+0x324>
	else if (__tmp > 65535)
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	4f e7       	ldi	r20, 0x7F	; 127
     f94:	57 e4       	ldi	r21, 0x47	; 71
     f96:	69 a1       	ldd	r22, Y+33	; 0x21
     f98:	7a a1       	ldd	r23, Y+34	; 0x22
     f9a:	8b a1       	ldd	r24, Y+35	; 0x23
     f9c:	9c a1       	ldd	r25, Y+36	; 0x24
     f9e:	0e 94 a5 09 	call	0x134a	; 0x134a <__gesf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	4c f5       	brge	.+82     	; 0xff8 <main+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	51 e4       	ldi	r21, 0x41	; 65
     fae:	6d 8d       	ldd	r22, Y+29	; 0x1d
     fb0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     fb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fb4:	98 a1       	ldd	r25, Y+32	; 0x20
     fb6:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9e a3       	std	Y+38, r25	; 0x26
     fcc:	8d a3       	std	Y+37, r24	; 0x25
     fce:	0f c0       	rjmp	.+30     	; 0xfee <main+0x306>
     fd0:	88 ec       	ldi	r24, 0xC8	; 200
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	98 a7       	std	Y+40, r25	; 0x28
     fd6:	8f a3       	std	Y+39, r24	; 0x27
     fd8:	8f a1       	ldd	r24, Y+39	; 0x27
     fda:	98 a5       	ldd	r25, Y+40	; 0x28
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <main+0x2f4>
     fe0:	98 a7       	std	Y+40, r25	; 0x28
     fe2:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	8d a1       	ldd	r24, Y+37	; 0x25
     fe6:	9e a1       	ldd	r25, Y+38	; 0x26
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9e a3       	std	Y+38, r25	; 0x26
     fec:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	8d a1       	ldd	r24, Y+37	; 0x25
     ff0:	9e a1       	ldd	r25, Y+38	; 0x26
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <main+0x2e8>
             _delay_ms(500);
     }
     ff6:	0e cf       	rjmp	.-484    	; 0xe14 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	69 a1       	ldd	r22, Y+33	; 0x21
     ffa:	7a a1       	ldd	r23, Y+34	; 0x22
     ffc:	8b a1       	ldd	r24, Y+35	; 0x23
     ffe:	9c a1       	ldd	r25, Y+36	; 0x24
    1000:	0e 94 04 09 	call	0x1208	; 0x1208 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e a3       	std	Y+38, r25	; 0x26
    100a:	8d a3       	std	Y+37, r24	; 0x25
    100c:	8d a1       	ldd	r24, Y+37	; 0x25
    100e:	9e a1       	ldd	r25, Y+38	; 0x26
    1010:	9a a7       	std	Y+42, r25	; 0x2a
    1012:	89 a7       	std	Y+41, r24	; 0x29
    1014:	89 a5       	ldd	r24, Y+41	; 0x29
    1016:	9a a5       	ldd	r25, Y+42	; 0x2a
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <main+0x330>
    101c:	9a a7       	std	Y+42, r25	; 0x2a
    101e:	89 a7       	std	Y+41, r24	; 0x29
    1020:	f9 ce       	rjmp	.-526    	; 0xe14 <main+0x12c>

00001022 <__udivmodsi4>:
    1022:	a1 e2       	ldi	r26, 0x21	; 33
    1024:	1a 2e       	mov	r1, r26
    1026:	aa 1b       	sub	r26, r26
    1028:	bb 1b       	sub	r27, r27
    102a:	fd 01       	movw	r30, r26
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__udivmodsi4_ep>

0000102e <__udivmodsi4_loop>:
    102e:	aa 1f       	adc	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	ee 1f       	adc	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	a2 17       	cp	r26, r18
    1038:	b3 07       	cpc	r27, r19
    103a:	e4 07       	cpc	r30, r20
    103c:	f5 07       	cpc	r31, r21
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__udivmodsi4_ep>
    1040:	a2 1b       	sub	r26, r18
    1042:	b3 0b       	sbc	r27, r19
    1044:	e4 0b       	sbc	r30, r20
    1046:	f5 0b       	sbc	r31, r21

00001048 <__udivmodsi4_ep>:
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a 94       	dec	r1
    1052:	69 f7       	brne	.-38     	; 0x102e <__udivmodsi4_loop>
    1054:	60 95       	com	r22
    1056:	70 95       	com	r23
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	bd 01       	movw	r22, r26
    1062:	cf 01       	movw	r24, r30
    1064:	08 95       	ret

00001066 <__subsf3>:
    1066:	50 58       	subi	r21, 0x80	; 128

00001068 <__addsf3>:
    1068:	bb 27       	eor	r27, r27
    106a:	aa 27       	eor	r26, r26
    106c:	0e d0       	rcall	.+28     	; 0x108a <__addsf3x>
    106e:	33 c1       	rjmp	.+614    	; 0x12d6 <__fp_round>
    1070:	24 d1       	rcall	.+584    	; 0x12ba <__fp_pscA>
    1072:	30 f0       	brcs	.+12     	; 0x1080 <__addsf3+0x18>
    1074:	29 d1       	rcall	.+594    	; 0x12c8 <__fp_pscB>
    1076:	20 f0       	brcs	.+8      	; 0x1080 <__addsf3+0x18>
    1078:	31 f4       	brne	.+12     	; 0x1086 <__addsf3+0x1e>
    107a:	9f 3f       	cpi	r25, 0xFF	; 255
    107c:	11 f4       	brne	.+4      	; 0x1082 <__addsf3+0x1a>
    107e:	1e f4       	brtc	.+6      	; 0x1086 <__addsf3+0x1e>
    1080:	19 c1       	rjmp	.+562    	; 0x12b4 <__fp_nan>
    1082:	0e f4       	brtc	.+2      	; 0x1086 <__addsf3+0x1e>
    1084:	e0 95       	com	r30
    1086:	e7 fb       	bst	r30, 7
    1088:	0f c1       	rjmp	.+542    	; 0x12a8 <__fp_inf>

0000108a <__addsf3x>:
    108a:	e9 2f       	mov	r30, r25
    108c:	35 d1       	rcall	.+618    	; 0x12f8 <__fp_split3>
    108e:	80 f3       	brcs	.-32     	; 0x1070 <__addsf3+0x8>
    1090:	ba 17       	cp	r27, r26
    1092:	62 07       	cpc	r22, r18
    1094:	73 07       	cpc	r23, r19
    1096:	84 07       	cpc	r24, r20
    1098:	95 07       	cpc	r25, r21
    109a:	18 f0       	brcs	.+6      	; 0x10a2 <__addsf3x+0x18>
    109c:	71 f4       	brne	.+28     	; 0x10ba <__addsf3x+0x30>
    109e:	9e f5       	brtc	.+102    	; 0x1106 <__addsf3x+0x7c>
    10a0:	4d c1       	rjmp	.+666    	; 0x133c <__fp_zero>
    10a2:	0e f4       	brtc	.+2      	; 0x10a6 <__addsf3x+0x1c>
    10a4:	e0 95       	com	r30
    10a6:	0b 2e       	mov	r0, r27
    10a8:	ba 2f       	mov	r27, r26
    10aa:	a0 2d       	mov	r26, r0
    10ac:	0b 01       	movw	r0, r22
    10ae:	b9 01       	movw	r22, r18
    10b0:	90 01       	movw	r18, r0
    10b2:	0c 01       	movw	r0, r24
    10b4:	ca 01       	movw	r24, r20
    10b6:	a0 01       	movw	r20, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	ff 27       	eor	r31, r31
    10bc:	59 1b       	sub	r21, r25
    10be:	99 f0       	breq	.+38     	; 0x10e6 <__addsf3x+0x5c>
    10c0:	59 3f       	cpi	r21, 0xF9	; 249
    10c2:	50 f4       	brcc	.+20     	; 0x10d8 <__addsf3x+0x4e>
    10c4:	50 3e       	cpi	r21, 0xE0	; 224
    10c6:	68 f1       	brcs	.+90     	; 0x1122 <__addsf3x+0x98>
    10c8:	1a 16       	cp	r1, r26
    10ca:	f0 40       	sbci	r31, 0x00	; 0
    10cc:	a2 2f       	mov	r26, r18
    10ce:	23 2f       	mov	r18, r19
    10d0:	34 2f       	mov	r19, r20
    10d2:	44 27       	eor	r20, r20
    10d4:	58 5f       	subi	r21, 0xF8	; 248
    10d6:	f3 cf       	rjmp	.-26     	; 0x10be <__addsf3x+0x34>
    10d8:	46 95       	lsr	r20
    10da:	37 95       	ror	r19
    10dc:	27 95       	ror	r18
    10de:	a7 95       	ror	r26
    10e0:	f0 40       	sbci	r31, 0x00	; 0
    10e2:	53 95       	inc	r21
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__addsf3x+0x4e>
    10e6:	7e f4       	brtc	.+30     	; 0x1106 <__addsf3x+0x7c>
    10e8:	1f 16       	cp	r1, r31
    10ea:	ba 0b       	sbc	r27, r26
    10ec:	62 0b       	sbc	r22, r18
    10ee:	73 0b       	sbc	r23, r19
    10f0:	84 0b       	sbc	r24, r20
    10f2:	ba f0       	brmi	.+46     	; 0x1122 <__addsf3x+0x98>
    10f4:	91 50       	subi	r25, 0x01	; 1
    10f6:	a1 f0       	breq	.+40     	; 0x1120 <__addsf3x+0x96>
    10f8:	ff 0f       	add	r31, r31
    10fa:	bb 1f       	adc	r27, r27
    10fc:	66 1f       	adc	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	c2 f7       	brpl	.-16     	; 0x10f4 <__addsf3x+0x6a>
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <__addsf3x+0x98>
    1106:	ba 0f       	add	r27, r26
    1108:	62 1f       	adc	r22, r18
    110a:	73 1f       	adc	r23, r19
    110c:	84 1f       	adc	r24, r20
    110e:	48 f4       	brcc	.+18     	; 0x1122 <__addsf3x+0x98>
    1110:	87 95       	ror	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b7 95       	ror	r27
    1118:	f7 95       	ror	r31
    111a:	9e 3f       	cpi	r25, 0xFE	; 254
    111c:	08 f0       	brcs	.+2      	; 0x1120 <__addsf3x+0x96>
    111e:	b3 cf       	rjmp	.-154    	; 0x1086 <__addsf3+0x1e>
    1120:	93 95       	inc	r25
    1122:	88 0f       	add	r24, r24
    1124:	08 f0       	brcs	.+2      	; 0x1128 <__addsf3x+0x9e>
    1126:	99 27       	eor	r25, r25
    1128:	ee 0f       	add	r30, r30
    112a:	97 95       	ror	r25
    112c:	87 95       	ror	r24
    112e:	08 95       	ret

00001130 <__cmpsf2>:
    1130:	97 d0       	rcall	.+302    	; 0x1260 <__fp_cmp>
    1132:	08 f4       	brcc	.+2      	; 0x1136 <__cmpsf2+0x6>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	08 95       	ret

00001138 <__divsf3>:
    1138:	0c d0       	rcall	.+24     	; 0x1152 <__divsf3x>
    113a:	cd c0       	rjmp	.+410    	; 0x12d6 <__fp_round>
    113c:	c5 d0       	rcall	.+394    	; 0x12c8 <__fp_pscB>
    113e:	40 f0       	brcs	.+16     	; 0x1150 <__divsf3+0x18>
    1140:	bc d0       	rcall	.+376    	; 0x12ba <__fp_pscA>
    1142:	30 f0       	brcs	.+12     	; 0x1150 <__divsf3+0x18>
    1144:	21 f4       	brne	.+8      	; 0x114e <__divsf3+0x16>
    1146:	5f 3f       	cpi	r21, 0xFF	; 255
    1148:	19 f0       	breq	.+6      	; 0x1150 <__divsf3+0x18>
    114a:	ae c0       	rjmp	.+348    	; 0x12a8 <__fp_inf>
    114c:	51 11       	cpse	r21, r1
    114e:	f7 c0       	rjmp	.+494    	; 0x133e <__fp_szero>
    1150:	b1 c0       	rjmp	.+354    	; 0x12b4 <__fp_nan>

00001152 <__divsf3x>:
    1152:	d2 d0       	rcall	.+420    	; 0x12f8 <__fp_split3>
    1154:	98 f3       	brcs	.-26     	; 0x113c <__divsf3+0x4>

00001156 <__divsf3_pse>:
    1156:	99 23       	and	r25, r25
    1158:	c9 f3       	breq	.-14     	; 0x114c <__divsf3+0x14>
    115a:	55 23       	and	r21, r21
    115c:	b1 f3       	breq	.-20     	; 0x114a <__divsf3+0x12>
    115e:	95 1b       	sub	r25, r21
    1160:	55 0b       	sbc	r21, r21
    1162:	bb 27       	eor	r27, r27
    1164:	aa 27       	eor	r26, r26
    1166:	62 17       	cp	r22, r18
    1168:	73 07       	cpc	r23, r19
    116a:	84 07       	cpc	r24, r20
    116c:	38 f0       	brcs	.+14     	; 0x117c <__divsf3_pse+0x26>
    116e:	9f 5f       	subi	r25, 0xFF	; 255
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	44 1f       	adc	r20, r20
    1178:	aa 1f       	adc	r26, r26
    117a:	a9 f3       	breq	.-22     	; 0x1166 <__divsf3_pse+0x10>
    117c:	33 d0       	rcall	.+102    	; 0x11e4 <__divsf3_pse+0x8e>
    117e:	0e 2e       	mov	r0, r30
    1180:	3a f0       	brmi	.+14     	; 0x1190 <__divsf3_pse+0x3a>
    1182:	e0 e8       	ldi	r30, 0x80	; 128
    1184:	30 d0       	rcall	.+96     	; 0x11e6 <__divsf3_pse+0x90>
    1186:	91 50       	subi	r25, 0x01	; 1
    1188:	50 40       	sbci	r21, 0x00	; 0
    118a:	e6 95       	lsr	r30
    118c:	00 1c       	adc	r0, r0
    118e:	ca f7       	brpl	.-14     	; 0x1182 <__divsf3_pse+0x2c>
    1190:	29 d0       	rcall	.+82     	; 0x11e4 <__divsf3_pse+0x8e>
    1192:	fe 2f       	mov	r31, r30
    1194:	27 d0       	rcall	.+78     	; 0x11e4 <__divsf3_pse+0x8e>
    1196:	66 0f       	add	r22, r22
    1198:	77 1f       	adc	r23, r23
    119a:	88 1f       	adc	r24, r24
    119c:	bb 1f       	adc	r27, r27
    119e:	26 17       	cp	r18, r22
    11a0:	37 07       	cpc	r19, r23
    11a2:	48 07       	cpc	r20, r24
    11a4:	ab 07       	cpc	r26, r27
    11a6:	b0 e8       	ldi	r27, 0x80	; 128
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__divsf3_pse+0x56>
    11aa:	bb 0b       	sbc	r27, r27
    11ac:	80 2d       	mov	r24, r0
    11ae:	bf 01       	movw	r22, r30
    11b0:	ff 27       	eor	r31, r31
    11b2:	93 58       	subi	r25, 0x83	; 131
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	2a f0       	brmi	.+10     	; 0x11c2 <__divsf3_pse+0x6c>
    11b8:	9e 3f       	cpi	r25, 0xFE	; 254
    11ba:	51 05       	cpc	r21, r1
    11bc:	68 f0       	brcs	.+26     	; 0x11d8 <__divsf3_pse+0x82>
    11be:	74 c0       	rjmp	.+232    	; 0x12a8 <__fp_inf>
    11c0:	be c0       	rjmp	.+380    	; 0x133e <__fp_szero>
    11c2:	5f 3f       	cpi	r21, 0xFF	; 255
    11c4:	ec f3       	brlt	.-6      	; 0x11c0 <__divsf3_pse+0x6a>
    11c6:	98 3e       	cpi	r25, 0xE8	; 232
    11c8:	dc f3       	brlt	.-10     	; 0x11c0 <__divsf3_pse+0x6a>
    11ca:	86 95       	lsr	r24
    11cc:	77 95       	ror	r23
    11ce:	67 95       	ror	r22
    11d0:	b7 95       	ror	r27
    11d2:	f7 95       	ror	r31
    11d4:	9f 5f       	subi	r25, 0xFF	; 255
    11d6:	c9 f7       	brne	.-14     	; 0x11ca <__divsf3_pse+0x74>
    11d8:	88 0f       	add	r24, r24
    11da:	91 1d       	adc	r25, r1
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	97 f9       	bld	r25, 7
    11e2:	08 95       	ret
    11e4:	e1 e0       	ldi	r30, 0x01	; 1
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	bb 1f       	adc	r27, r27
    11ee:	62 17       	cp	r22, r18
    11f0:	73 07       	cpc	r23, r19
    11f2:	84 07       	cpc	r24, r20
    11f4:	ba 07       	cpc	r27, r26
    11f6:	20 f0       	brcs	.+8      	; 0x1200 <__divsf3_pse+0xaa>
    11f8:	62 1b       	sub	r22, r18
    11fa:	73 0b       	sbc	r23, r19
    11fc:	84 0b       	sbc	r24, r20
    11fe:	ba 0b       	sbc	r27, r26
    1200:	ee 1f       	adc	r30, r30
    1202:	88 f7       	brcc	.-30     	; 0x11e6 <__divsf3_pse+0x90>
    1204:	e0 95       	com	r30
    1206:	08 95       	ret

00001208 <__fixunssfsi>:
    1208:	7f d0       	rcall	.+254    	; 0x1308 <__fp_splitA>
    120a:	88 f0       	brcs	.+34     	; 0x122e <__fixunssfsi+0x26>
    120c:	9f 57       	subi	r25, 0x7F	; 127
    120e:	90 f0       	brcs	.+36     	; 0x1234 <__fixunssfsi+0x2c>
    1210:	b9 2f       	mov	r27, r25
    1212:	99 27       	eor	r25, r25
    1214:	b7 51       	subi	r27, 0x17	; 23
    1216:	a0 f0       	brcs	.+40     	; 0x1240 <__fixunssfsi+0x38>
    1218:	d1 f0       	breq	.+52     	; 0x124e <__fixunssfsi+0x46>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	1a f0       	brmi	.+6      	; 0x122a <__fixunssfsi+0x22>
    1224:	ba 95       	dec	r27
    1226:	c9 f7       	brne	.-14     	; 0x121a <__fixunssfsi+0x12>
    1228:	12 c0       	rjmp	.+36     	; 0x124e <__fixunssfsi+0x46>
    122a:	b1 30       	cpi	r27, 0x01	; 1
    122c:	81 f0       	breq	.+32     	; 0x124e <__fixunssfsi+0x46>
    122e:	86 d0       	rcall	.+268    	; 0x133c <__fp_zero>
    1230:	b1 e0       	ldi	r27, 0x01	; 1
    1232:	08 95       	ret
    1234:	83 c0       	rjmp	.+262    	; 0x133c <__fp_zero>
    1236:	67 2f       	mov	r22, r23
    1238:	78 2f       	mov	r23, r24
    123a:	88 27       	eor	r24, r24
    123c:	b8 5f       	subi	r27, 0xF8	; 248
    123e:	39 f0       	breq	.+14     	; 0x124e <__fixunssfsi+0x46>
    1240:	b9 3f       	cpi	r27, 0xF9	; 249
    1242:	cc f3       	brlt	.-14     	; 0x1236 <__fixunssfsi+0x2e>
    1244:	86 95       	lsr	r24
    1246:	77 95       	ror	r23
    1248:	67 95       	ror	r22
    124a:	b3 95       	inc	r27
    124c:	d9 f7       	brne	.-10     	; 0x1244 <__fixunssfsi+0x3c>
    124e:	3e f4       	brtc	.+14     	; 0x125e <__fixunssfsi+0x56>
    1250:	90 95       	com	r25
    1252:	80 95       	com	r24
    1254:	70 95       	com	r23
    1256:	61 95       	neg	r22
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	8f 4f       	sbci	r24, 0xFF	; 255
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <__fp_cmp>:
    1260:	99 0f       	add	r25, r25
    1262:	00 08       	sbc	r0, r0
    1264:	55 0f       	add	r21, r21
    1266:	aa 0b       	sbc	r26, r26
    1268:	e0 e8       	ldi	r30, 0x80	; 128
    126a:	fe ef       	ldi	r31, 0xFE	; 254
    126c:	16 16       	cp	r1, r22
    126e:	17 06       	cpc	r1, r23
    1270:	e8 07       	cpc	r30, r24
    1272:	f9 07       	cpc	r31, r25
    1274:	c0 f0       	brcs	.+48     	; 0x12a6 <__fp_cmp+0x46>
    1276:	12 16       	cp	r1, r18
    1278:	13 06       	cpc	r1, r19
    127a:	e4 07       	cpc	r30, r20
    127c:	f5 07       	cpc	r31, r21
    127e:	98 f0       	brcs	.+38     	; 0x12a6 <__fp_cmp+0x46>
    1280:	62 1b       	sub	r22, r18
    1282:	73 0b       	sbc	r23, r19
    1284:	84 0b       	sbc	r24, r20
    1286:	95 0b       	sbc	r25, r21
    1288:	39 f4       	brne	.+14     	; 0x1298 <__fp_cmp+0x38>
    128a:	0a 26       	eor	r0, r26
    128c:	61 f0       	breq	.+24     	; 0x12a6 <__fp_cmp+0x46>
    128e:	23 2b       	or	r18, r19
    1290:	24 2b       	or	r18, r20
    1292:	25 2b       	or	r18, r21
    1294:	21 f4       	brne	.+8      	; 0x129e <__fp_cmp+0x3e>
    1296:	08 95       	ret
    1298:	0a 26       	eor	r0, r26
    129a:	09 f4       	brne	.+2      	; 0x129e <__fp_cmp+0x3e>
    129c:	a1 40       	sbci	r26, 0x01	; 1
    129e:	a6 95       	lsr	r26
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	81 1d       	adc	r24, r1
    12a4:	81 1d       	adc	r24, r1
    12a6:	08 95       	ret

000012a8 <__fp_inf>:
    12a8:	97 f9       	bld	r25, 7
    12aa:	9f 67       	ori	r25, 0x7F	; 127
    12ac:	80 e8       	ldi	r24, 0x80	; 128
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <__fp_nan>:
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
    12b6:	80 ec       	ldi	r24, 0xC0	; 192
    12b8:	08 95       	ret

000012ba <__fp_pscA>:
    12ba:	00 24       	eor	r0, r0
    12bc:	0a 94       	dec	r0
    12be:	16 16       	cp	r1, r22
    12c0:	17 06       	cpc	r1, r23
    12c2:	18 06       	cpc	r1, r24
    12c4:	09 06       	cpc	r0, r25
    12c6:	08 95       	ret

000012c8 <__fp_pscB>:
    12c8:	00 24       	eor	r0, r0
    12ca:	0a 94       	dec	r0
    12cc:	12 16       	cp	r1, r18
    12ce:	13 06       	cpc	r1, r19
    12d0:	14 06       	cpc	r1, r20
    12d2:	05 06       	cpc	r0, r21
    12d4:	08 95       	ret

000012d6 <__fp_round>:
    12d6:	09 2e       	mov	r0, r25
    12d8:	03 94       	inc	r0
    12da:	00 0c       	add	r0, r0
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <__fp_round+0xc>
    12de:	88 23       	and	r24, r24
    12e0:	52 f0       	brmi	.+20     	; 0x12f6 <__fp_round+0x20>
    12e2:	bb 0f       	add	r27, r27
    12e4:	40 f4       	brcc	.+16     	; 0x12f6 <__fp_round+0x20>
    12e6:	bf 2b       	or	r27, r31
    12e8:	11 f4       	brne	.+4      	; 0x12ee <__fp_round+0x18>
    12ea:	60 ff       	sbrs	r22, 0
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <__fp_round+0x20>
    12ee:	6f 5f       	subi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	08 95       	ret

000012f8 <__fp_split3>:
    12f8:	57 fd       	sbrc	r21, 7
    12fa:	90 58       	subi	r25, 0x80	; 128
    12fc:	44 0f       	add	r20, r20
    12fe:	55 1f       	adc	r21, r21
    1300:	59 f0       	breq	.+22     	; 0x1318 <__fp_splitA+0x10>
    1302:	5f 3f       	cpi	r21, 0xFF	; 255
    1304:	71 f0       	breq	.+28     	; 0x1322 <__fp_splitA+0x1a>
    1306:	47 95       	ror	r20

00001308 <__fp_splitA>:
    1308:	88 0f       	add	r24, r24
    130a:	97 fb       	bst	r25, 7
    130c:	99 1f       	adc	r25, r25
    130e:	61 f0       	breq	.+24     	; 0x1328 <__fp_splitA+0x20>
    1310:	9f 3f       	cpi	r25, 0xFF	; 255
    1312:	79 f0       	breq	.+30     	; 0x1332 <__fp_splitA+0x2a>
    1314:	87 95       	ror	r24
    1316:	08 95       	ret
    1318:	12 16       	cp	r1, r18
    131a:	13 06       	cpc	r1, r19
    131c:	14 06       	cpc	r1, r20
    131e:	55 1f       	adc	r21, r21
    1320:	f2 cf       	rjmp	.-28     	; 0x1306 <__fp_split3+0xe>
    1322:	46 95       	lsr	r20
    1324:	f1 df       	rcall	.-30     	; 0x1308 <__fp_splitA>
    1326:	08 c0       	rjmp	.+16     	; 0x1338 <__fp_splitA+0x30>
    1328:	16 16       	cp	r1, r22
    132a:	17 06       	cpc	r1, r23
    132c:	18 06       	cpc	r1, r24
    132e:	99 1f       	adc	r25, r25
    1330:	f1 cf       	rjmp	.-30     	; 0x1314 <__fp_splitA+0xc>
    1332:	86 95       	lsr	r24
    1334:	71 05       	cpc	r23, r1
    1336:	61 05       	cpc	r22, r1
    1338:	08 94       	sec
    133a:	08 95       	ret

0000133c <__fp_zero>:
    133c:	e8 94       	clt

0000133e <__fp_szero>:
    133e:	bb 27       	eor	r27, r27
    1340:	66 27       	eor	r22, r22
    1342:	77 27       	eor	r23, r23
    1344:	cb 01       	movw	r24, r22
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret

0000134a <__gesf2>:
    134a:	8a df       	rcall	.-236    	; 0x1260 <__fp_cmp>
    134c:	08 f4       	brcc	.+2      	; 0x1350 <__gesf2+0x6>
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	08 95       	ret

00001352 <__mulsf3>:
    1352:	0b d0       	rcall	.+22     	; 0x136a <__mulsf3x>
    1354:	c0 cf       	rjmp	.-128    	; 0x12d6 <__fp_round>
    1356:	b1 df       	rcall	.-158    	; 0x12ba <__fp_pscA>
    1358:	28 f0       	brcs	.+10     	; 0x1364 <__mulsf3+0x12>
    135a:	b6 df       	rcall	.-148    	; 0x12c8 <__fp_pscB>
    135c:	18 f0       	brcs	.+6      	; 0x1364 <__mulsf3+0x12>
    135e:	95 23       	and	r25, r21
    1360:	09 f0       	breq	.+2      	; 0x1364 <__mulsf3+0x12>
    1362:	a2 cf       	rjmp	.-188    	; 0x12a8 <__fp_inf>
    1364:	a7 cf       	rjmp	.-178    	; 0x12b4 <__fp_nan>
    1366:	11 24       	eor	r1, r1
    1368:	ea cf       	rjmp	.-44     	; 0x133e <__fp_szero>

0000136a <__mulsf3x>:
    136a:	c6 df       	rcall	.-116    	; 0x12f8 <__fp_split3>
    136c:	a0 f3       	brcs	.-24     	; 0x1356 <__mulsf3+0x4>

0000136e <__mulsf3_pse>:
    136e:	95 9f       	mul	r25, r21
    1370:	d1 f3       	breq	.-12     	; 0x1366 <__mulsf3+0x14>
    1372:	95 0f       	add	r25, r21
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	55 1f       	adc	r21, r21
    1378:	62 9f       	mul	r22, r18
    137a:	f0 01       	movw	r30, r0
    137c:	72 9f       	mul	r23, r18
    137e:	bb 27       	eor	r27, r27
    1380:	f0 0d       	add	r31, r0
    1382:	b1 1d       	adc	r27, r1
    1384:	63 9f       	mul	r22, r19
    1386:	aa 27       	eor	r26, r26
    1388:	f0 0d       	add	r31, r0
    138a:	b1 1d       	adc	r27, r1
    138c:	aa 1f       	adc	r26, r26
    138e:	64 9f       	mul	r22, r20
    1390:	66 27       	eor	r22, r22
    1392:	b0 0d       	add	r27, r0
    1394:	a1 1d       	adc	r26, r1
    1396:	66 1f       	adc	r22, r22
    1398:	82 9f       	mul	r24, r18
    139a:	22 27       	eor	r18, r18
    139c:	b0 0d       	add	r27, r0
    139e:	a1 1d       	adc	r26, r1
    13a0:	62 1f       	adc	r22, r18
    13a2:	73 9f       	mul	r23, r19
    13a4:	b0 0d       	add	r27, r0
    13a6:	a1 1d       	adc	r26, r1
    13a8:	62 1f       	adc	r22, r18
    13aa:	83 9f       	mul	r24, r19
    13ac:	a0 0d       	add	r26, r0
    13ae:	61 1d       	adc	r22, r1
    13b0:	22 1f       	adc	r18, r18
    13b2:	74 9f       	mul	r23, r20
    13b4:	33 27       	eor	r19, r19
    13b6:	a0 0d       	add	r26, r0
    13b8:	61 1d       	adc	r22, r1
    13ba:	23 1f       	adc	r18, r19
    13bc:	84 9f       	mul	r24, r20
    13be:	60 0d       	add	r22, r0
    13c0:	21 1d       	adc	r18, r1
    13c2:	82 2f       	mov	r24, r18
    13c4:	76 2f       	mov	r23, r22
    13c6:	6a 2f       	mov	r22, r26
    13c8:	11 24       	eor	r1, r1
    13ca:	9f 57       	subi	r25, 0x7F	; 127
    13cc:	50 40       	sbci	r21, 0x00	; 0
    13ce:	8a f0       	brmi	.+34     	; 0x13f2 <__mulsf3_pse+0x84>
    13d0:	e1 f0       	breq	.+56     	; 0x140a <__mulsf3_pse+0x9c>
    13d2:	88 23       	and	r24, r24
    13d4:	4a f0       	brmi	.+18     	; 0x13e8 <__mulsf3_pse+0x7a>
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	bb 1f       	adc	r27, r27
    13dc:	66 1f       	adc	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	88 1f       	adc	r24, r24
    13e2:	91 50       	subi	r25, 0x01	; 1
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	a9 f7       	brne	.-22     	; 0x13d2 <__mulsf3_pse+0x64>
    13e8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ea:	51 05       	cpc	r21, r1
    13ec:	70 f0       	brcs	.+28     	; 0x140a <__mulsf3_pse+0x9c>
    13ee:	5c cf       	rjmp	.-328    	; 0x12a8 <__fp_inf>
    13f0:	a6 cf       	rjmp	.-180    	; 0x133e <__fp_szero>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	ec f3       	brlt	.-6      	; 0x13f0 <__mulsf3_pse+0x82>
    13f6:	98 3e       	cpi	r25, 0xE8	; 232
    13f8:	dc f3       	brlt	.-10     	; 0x13f0 <__mulsf3_pse+0x82>
    13fa:	86 95       	lsr	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b7 95       	ror	r27
    1402:	f7 95       	ror	r31
    1404:	e7 95       	ror	r30
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	c1 f7       	brne	.-16     	; 0x13fa <__mulsf3_pse+0x8c>
    140a:	fe 2b       	or	r31, r30
    140c:	88 0f       	add	r24, r24
    140e:	91 1d       	adc	r25, r1
    1410:	96 95       	lsr	r25
    1412:	87 95       	ror	r24
    1414:	97 f9       	bld	r25, 7
    1416:	08 95       	ret

00001418 <_exit>:
    1418:	f8 94       	cli

0000141a <__stop_program>:
    141a:	ff cf       	rjmp	.-2      	; 0x141a <__stop_program>
